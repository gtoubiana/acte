    /**
     * Pour formater une date grégorienne
     * @memberof acte
     * @access public
     * @since 0.0.7
     * @author Gilles Toubiana
     * @see {@link https://github.com/gtoubiana/acte|Projet sur GitHub}
     * @license MIT
     * @param {String} [format='%d/%m/%Y'] - Le modèle de formatage
     * @param {String} [erreur='Pas de correspondances'] - Le message d'erreur
     * @param {Function} [rappel] - Une fonction de rappel
     * @return {String} La date grégorienne formatée
     * @example
     * new acte.Jour('8 mai 1972').gregorien(); // "8/5/1972"
     */
    acte.Jour.prototype.gregorien = function () {
      function Gregorien(format, erreur, rappel) {
        erreur = erreur || "Pas de correspondances.";
        var output;
        var frmt = format;
        var obj = this.variables.gregorien;

        // Nom des Mois Grégoriens et abbréviations
        var moisGregorien = [
  ["Janvier", "Janv", "Jan", "Jr", "J"],
  ["Février", "Févr", "Fév", "Fr", "F"],
  ["Mars", "Mars", "Mar", "Ms", "M"],
  ["Avril", "Avr", "Avr", "Al", "A"],
  ["Mai", "Mai", "Mai", "Mi", "M"],
  ["Juin", "Juin", "Jun", "Jn", "J"],
  ["Juillet", "Juill", "Jul", "Jt", "J"],
  ["Août", "Août", "Aoû", "At", "A"],
  ["Septembre", "Sept", "Sep", "Se", "S"],
  ["Octobre", "Oct", "Oct", "Oe", "O"],
  ["Novembre", "Nov", "Nov", "Ne", "N"],
  ["Décembre", "Déc", "Déc", "De", "D"]
];

        // Nom des Jours Grégoriens et abbréviations
var jourGregorien = [
  ["Dimanche", "Dim", "Dim", "Di", "D"],
  ["Lundi", "Lundi", "Lun", "Lu", "L"],
  ["Mardi", "Mardi", "Mar", "Ma", "M"],
  ["Mercredi", "Mercr", "Mer", "Me", "M"],
  ["Jeudi", "Jeudi", "Jeu", "Je", "J"],
  ["Vendredi", "Vendr", "Ven", "Ve", "V"],
  ["Samedi", "Sam", "Sam", "Sa", "S"]
];

// Nombre de jours complets entre 2 dates
/**
 * HERE GOES THE JSDOC COMMENTS
 */
var periodeEnJours = function ([j1,m1,a1], [j2, m2, a2]) {
  var date1 = dateValide(j1,m1,a1);
  var date2 = dateValide(j2,m2,a2);
  var debut = (date2 > date1) ? date1 : date2;
  var fin = (date2 > date1) ? date2 : date1;
  return Math.ceil((fin - debut) / (1000 * 60 * 60 * 24)) +1;
};

// Calcul du nombre de semaines
/**
 * HERE GOES THE JSDOC COMMENTS
 */
var semaineComplete = function (j,m,a,mois) {
  // si l'argument mois existe, calcule depuis le début du mois.
  // sinon depuis le début de l'année
  var x = (mois) ? m : 1;
	var jourSemaine = dateValide(1,x,a).getDay();
  jourSemaine = (jourSemaine === 0) ? 7 : jourSemaine;
  // si le premier jour < jeudi (4), ajouter une semaine
	var n = (jourSemaine <= 4) ? 1 : 0;

	var nombreSemaines = (periodeEnJours([1,x,a], [j,m,a]) - (8-jourSemaine)) / 7;
	var semainesValides = (nombreSemaines > parseInt(nombreSemaines)) ? parseInt(nombreSemaines) + n + 1 : parseInt(nombreSemaines) + n;
	return semainesValides;
};

/**
 * HERE GOES THE JSDOC COMMENTS
 */
var prefixeZero = function(n) {
  return n < 10 ? "0" + n : n;
};

/**
 * HERE GOES THE JSDOC COMMENTS
 */
var nombreOrdinal = function(n, prem, exp) {
    return n === 1 || n === "1er" || n === "1re" ? "1" + prem : n + exp;
};

/**
 * HERE GOES THE JSDOC COMMENTS
 */
var initialeEnCapitale = function (str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
};

/**
 * HERE GOES THE JSDOC COMMENTS
 */
var nombreEnLettres = function(n,r) {
  if (typeof n === 'number' && n > -10000 && n < 10000) {
      var mill, sepcen, centl, sepdix, dixl, sepunit, unitl, dizunit, res;
      // unitesEnLettres
      var u = ["", "un", "deux", "trois", "quatre", "cinq", "six", "sept", "huit", "neuf", 'dix', 'onze', 'douze', 'treize', 'quatorze', 'quinze', 'seize', 'dix-sept', 'dix-huit', 'dix-neuf'];
      // dixainesEnLettres
      var v = ["", "dix", "vingt", "trente", "quarante", "cinquante", "soixante", "soixante", "quatre-vingt", "quatre-vingt"];
      var abs = Math.abs(n); // saisie en valeur absolue
      var splus = (r) ? " " : "-";
      var smoins = (r) ? "-" : " ";
      var mil = parseInt(abs/1000); // milliers
      var cent = parseInt(abs%1000/100); // centaines
      var dix = parseInt(abs%100/10); // dixaines
      var unit = parseInt(abs%10); // unités

      // Milliers
      if (mil == 1) {
        mill = "mille"; // un seul millier
      } else if (mil > 1) {
        mill = u[mil]+splus+"mille"; // plusieurs milliers
      } else {
        mill = ""; // pas de milliers
      }

      // Centaines
      sepcen = (mil > 0) ? splus : "";
      if (cent == 1) {
        centl = sepcen+"cent"; // une seule centaine
      } else if (cent > 1 && dix === 0 && unit === 0) {
        centl = sepcen+u[cent]+splus+"cents"; // plusieurs centaines
      } else if (cent > 1) {
        centl = sepcen+u[cent]+splus+"cent"; // plusieurs centaines suivies de dizaines
      } else {
        centl = ""; // pas de centaines
      }

      // Dizaines et unités
      sepdix = (mil+cent > 0) && (dix+unit > 0)? splus : "";
      if (dix > 0) {
        dixl = v[dix];
        sepunit="-"; //splus
      } else {
        dixl = "";
        sepunit="";
      }
      unitl = (abs > 0) ? sepunit+u[unit]: "zéro"; // unités
      if ((dix*10+unit)%10 === 0) {unitl = "";} // multiples de 10

      // dix, soixante-dix, quatre-vingt-dix
      if ((dix == 1 || dix == 7 || dix == 9) && unit === 0) {
        dixl = (dix == 1) ? "dix" : v[dix]+"-dix";
        unitl = (dix == 1) ? "" : u[unit];
      }
      // onze+
      // soixante-et-onze+, quatre-vingt-onze+
      if ((dix == 1 || dix == 7 || dix == 9) && unit >= 1) {
        dixl = (dix == 1) ? "" : v[dix];
        if (dix == 1) {sepunit = "";}
        unitl = (dix == 7 && unit == 1) ? splus+"et"+splus+u[10 + unit] : sepunit+u[10 + unit];
      }
      // vingt-et-un, trente-et-un, quarante-et-un,
      // cinquante-et-un, soixante-et-un
      if (dix >= 2 && dix <= 6 && unit === 1) {
        unitl = splus+"et"+splus+u[unit];
      }
      if (dix === 8 && unit === 0) { // pluriel sur 80
        dixl = v[dix]+"s";
        unitl = "";
      }

    dizunit = sepdix+dixl+unitl;

      // si nombre négatif
      var avjc = (n < 0) ? " av. J.-C.": "";
      res = (abs > 0) ? initialeEnCapitale(mill+centl+dizunit+avjc): "Zéro";
    return res;
  } else {
    return "";
  }
};

/**
 * HERE GOES THE JSDOC COMMENTS
 */
var ordinauxEnLettres = function(saisie, genre) {
  var str = saisie.toString();
  var result;
  var prem = (genre) ? "première" : "premier"; // genre

  switch (str.slice(-1)) { // dernier caractère
    case "o":
    case "t":
    case "x":
      result = str + "ième";
      break;
    case "q":
      result = str + "uième";
      break;
    case "f":
      result = str.slice(0, str.length - 1) + "vième";
      break;
    case "e":
      result = str.slice(0, str.length - 1) + "ième";
      break;
    case "s":
      result = (str.slice(-2) == "ts") ? str.slice(0, str.length - 1) + "ième" : str + "ième";
      break;
    case "n":
      result = (str.slice(-5) == "et-un" || str.slice(-5) == "et un") ? str + "ième" : (str == "Un") ? initialeEnCapitale(prem) : prem;
      break;
    default:
      result = str;
  }
  return result;
};

/**
 * HERE GOES THE JSDOC COMMENTS
 */
var arabeVersRomain = function arabeVersRomain(arabe) {
  var lookup = {
    M: 1000,
    CM: 900,
    D: 500,
    CD: 400,
    C: 100,
    XC: 90,
    L: 50,
    XL: 40,
    X: 10,
    IX: 9,
    V: 5,
    IV: 4,
    I: 1
  };
  var tempArabe = arabe;
  var romain = '';
  var i = void 0;
  if (typeof arabe === 'number') {
  for (i in lookup) {
    if (lookup.hasOwnProperty(i)) {
      while (tempArabe >= lookup[i]) {
        romain += i;
        tempArabe -= lookup[i];
      }
    }
  }
  } else {
    romain = arabe;
  }

  return romain;
};



        if (obj.od) {
          // -> output n'est plus nécessaire.
          // => placer le .replace dans cette boucle IF !!!
          output = {
          Ml: moisGregorien[obj.mc-1],
          JSl: jourGregorien[obj.od.getDay()]
        };
        } else {
          return erreur;
        }
        frmt = frmt || "%Jz/%Mz/%A";
        var str = frmt.replace(/%[ADJMNSabceflmprvz123]+/g, function(x) {
 var resultat = x;
    if (x.match(/A/)) {
      if (x.match(/AN/)) { resultat = obj.ac; }
      else if (x.match(/DA/)) { resultat = semaineComplete(obj.jmc, obj.mc, obj.ac, 0); }
      else if (x.match(/JA/)) { resultat = periodeEnJours([1, 1, obj.ac], [obj.jmc, obj.mc, obj.ac]); }
      else if (x.match(/MA/)) { resultat = obj.mc;
         if (x.match(/l/)) { resultat = moisGregorien[obj.mc-1][0];}
         else if (x.match(/a/)) { resultat = moisGregorien[obj.mc-1][1];}
         else if (x.match(/3/)) { resultat = moisGregorien[obj.mc-1][2];}
         else if (x.match(/2/)) { resultat = moisGregorien[obj.mc-1][3];}
         else if (x.match(/1/)) { resultat = moisGregorien[obj.mc-1][4];}
      }
      else if (x.match(/SA/)) { resultat = semaineComplete(obj.jmc, obj.mc, obj.ac, 0); }
      else resultat = obj.ac;
    }
    if (x.match(/J/)) {
      if (x.match(/JA/)) { resultat = periodeEnJours([1, 1, obj.ac], [obj.jmc, obj.mc, obj.ac]); }
      else if (x.match(/JS/)) { resultat = obj.od.getDay();
        if (x.match(/l/)) { resultat = jourGregorien[obj.od.getDay()][0];}
        else if (x.match(/a/)) { resultat = jourGregorien[obj.od.getDay()][1];}
         else if (x.match(/3/)) { resultat = jourGregorien[obj.od.getDay()][2];}
         else if (x.match(/2/)) { resultat = jourGregorien[obj.od.getDay()][3];}
         else if (x.match(/1/)) { resultat = jourGregorien[obj.od.getDay()][4];}
                              }
      else if (x.match(/JM/)) { resultat = obj.jmc; }
      else if (x.match(/JD/)) { resultat = obj.od.getDay();
        if (x.match(/l/)) { resultat = jourGregorien[obj.od.getDay()][0];} }
        else if (x.match(/a/)) { resultat = jourGregorien[obj.od.getDay()][1];}
         else if (x.match(/3/)) { resultat = jourGregorien[obj.od.getDay()][2];}
         else if (x.match(/2/)) { resultat = jourGregorien[obj.od.getDay()][3];}
         else if (x.match(/1/)) { resultat = jourGregorien[obj.od.getDay()][4];}
      else resultat = obj.jmc; }
    if (x.match(/M/)) {
      if (x.match(/MA/)) { resultat = obj.mc;
         if (x.match(/l/)) { resultat = moisGregorien[obj.mc-1][0];}
         else if (x.match(/a/)) { resultat = moisGregorien[obj.mc-1][1];}
         else if (x.match(/3/)) { resultat = moisGregorien[obj.mc-1][2];}
         else if (x.match(/2/)) { resultat = moisGregorien[obj.mc-1][3];}
         else if (x.match(/1/)) { resultat = moisGregorien[obj.mc-1][4];}
      }
      else if (x.match(/DM/)) { resultat = semaineComplete(obj.jmc, obj.mc, obj.ac, 1); }
      else if (x.match(/JM/)) { resultat = obj.jmc; }
      else if (x.match(/SM/)) { resultat = semaineComplete(obj.jmc, obj.mc, obj.ac, 1); }
      else if (x.match(/l/)) { resultat = moisGregorien[obj.mc-1][0];}
         else if (x.match(/a/)) { resultat = moisGregorien[obj.mc-1][1];}
         else if (x.match(/3/)) { resultat = moisGregorien[obj.mc-1][2];}
         else if (x.match(/2/)) { resultat = moisGregorien[obj.mc-1][3];}
         else if (x.match(/1/)) { resultat = moisGregorien[obj.mc-1][4];}
      else resultat = obj.mc; }
    if (x.match(/D/)) {
      if (x.match(/DA/)) { resultat = semaineComplete(obj.jmc, obj.mc, obj.ac, 0); }
      else if (x.match(/DM/)) { resultat = semaineComplete(obj.jmc, obj.mc, obj.ac, 1); }
      else if (x.match(/JD/)) { resultat = obj.od.getDay();
        if (x.match(/l/)) { resultat = jourGregorien[obj.od.getDay()][0];}
         else if (x.match(/a/)) { resultat = jourGregorien[obj.od.getDay()][1];}
         else if (x.match(/3/)) { resultat = jourGregorien[obj.od.getDay()][2];}
         else if (x.match(/2/)) { resultat = jourGregorien[obj.od.getDay()][3];}
         else if (x.match(/1/)) { resultat = jourGregorien[obj.od.getDay()][4];}
        }
      else resultat = semaineComplete(obj.jmc, obj.mc, obj.ac, 1); }
    if (x.match(/S/)) {
      if (x.match(/JS/)) { resultat = obj.od.getDay();
        if (x.match(/l/)) { resultat = jourGregorien[obj.od.getDay()][0];}
         else if (x.match(/a/)) { resultat = jourGregorien[obj.od.getDay()][1];}
         else if (x.match(/3/)) { resultat = jourGregorien[obj.od.getDay()][2];}
         else if (x.match(/2/)) { resultat = jourGregorien[obj.od.getDay()][3];}
         else if (x.match(/1/)) { resultat = jourGregorien[obj.od.getDay()][4];}
      }
      else if (x.match(/SA/)) { resultat = semaineComplete(obj.jmc, obj.mc, obj.ac, 0); }
      else if (x.match(/SM/)) { resultat = semaineComplete(obj.jmc, obj.mc, obj.ac, 1); }
      else resultat = semaineComplete(obj.jmc, obj.mc, obj.ac, 0); }
    if (x.match(/l|v/) && typeof resultat=="number") {
      if (x.match(/v/) && typeof resultat=="number") {
        resultat = nombreEnLettres(resultat,1);
      } else {
        resultat = nombreEnLettres(resultat);
      }
    }
    if (x.match(/e/) && !isNaN(resultat)) { resultat = nombreOrdinal(resultat,"er","e"); }
    else if (x.match(/e/) && typeof resultat=="string") { resultat = ordinauxEnLettres(resultat); }
    if (x.match(/p/) && !isNaN(resultat)) { resultat = nombreOrdinal(resultat,"er",""); }
    else if (x.match(/p/) && isNaN(resultat)) { resultat = ordinauxEnLettres(resultat); }
    if (x.match(/f/) && !isNaN(resultat)) { resultat = nombreOrdinal(resultat,"re",""); }
    else if (x.match(/f/) && isNaN(resultat)) { resultat = ordinauxEnLettres(resultat,1); }
    if (x.match(/r/)) { resultat = arabeVersRomain(resultat); }
    if (x.match(/b/)) { resultat = resultat.toLowerCase(); }
    if (x.match(/c|m/)) { resultat = resultat.toUpperCase(); }
    if (x.match(/z/)) { resultat = prefixeZero(resultat); }

    return resultat;
});

        if(rappel) {rappel();}
        return str;

      }

      return Gregorien;
    }();

    return acte;
  }

  return umdCallback;
}());


console.log("JOUR = 8 Mai 1972");
var birth = new acte.Jour("8 Mai 1972");
console.log("DEFAUT = "+birth.gregorien());
console.log("ERROR = "+new acte.Jour("").gregorien("%JM-%M-%A","Message d'erreur"));
console.log("*********************************************");
console.log("%A, %ANr (année) = "+birth.gregorien("%A, %ANr"));
console.log("%J, %JM (jour du mois) = "+birth.gregorien("%J, %JM"));
console.log("%JA (jour de l'année) = "+birth.gregorien("%JA"));
console.log("%JS, %JD (jour de la semaine) = "+birth.gregorien("%JS, %JD"));
console.log("%JSl, %JDlr (jour de la semaine en lettres) = "+birth.gregorien("%JSl, %JDlr"));
console.log("%JSlm, %JDcl (jour de la semaine en lettres MAJ) = "+birth.gregorien("%JSlm, %JDcl"));
console.log("%JSlb, %JDbl (jour de la semaine en lettres MIN) = "+birth.gregorien("%JSlb, %JDbl"));
console.log("%JSa, %JDa (jour de la semaine en abbrégé) = "+birth.gregorien("%JSa, %JDa"));
console.log("%JS3, %JD3 (jour de la semaine sur 3 caractères) = "+birth.gregorien("%JS3, %JD3"));
console.log("%JS2, %JD2 (jour de la semaine sur 2 caractères) = "+birth.gregorien("%JS2, %JD2"));
console.log("%JS1, %JD1 (jour de la semaine sur 1 caractère) = "+birth.gregorien("%JS1, %JD1"));
console.log("%M, MA (mois de l'année) = "+birth.gregorien("%M, %MA"));
console.log("%Ml, %MAlz (mois de l'année en lettres) = "+birth.gregorien("%Ml, %MAlz"));
console.log("%Ma, %MAa (mois de l'année en abbrégé) = "+birth.gregorien("%Ma, %MAa"));
console.log("%M3, %MA3 (mois de l'année sur 3 caractères) = "+birth.gregorien("%M3, %MA3"));
console.log("%M2, %MA2 (mois de l'année sur 2 caractères) = "+birth.gregorien("%M2, %MA2"));
console.log("%M1, %MA1 (mois de l'année sur 1 caractère) = "+birth.gregorien("%M1, %MA1"));
console.log("%SA, %DA, %Sr (semaine de l'année) = "+birth.gregorien("%SA, %DA, %Sr"));
console.log("%SM, %DM, %Dz (semaine du mois) = "+birth.gregorien("%SM, %DM, %Dz"));
console.log("%JSl %JM %Ml %A = "+birth.gregorien("%JSl %JM %Ml %A"));
console.log("%JMz/%Mz/%A = "+birth.gregorien("%JMz/%Mz/%A"));
console.log("%JS2m%JMz%M2m%A = "+birth.gregorien("%JS2m%JMz%M2m%A"));
console.log("%A-W%Sz-%Jz = "+birth.gregorien("%A-W%Sz-%Jz"));
console.log("30 Déc 2007 = %A-W%Sz-%JSz = ISO2007-W52-7 => "+new acte.Jour("30 Déc 2007").gregorien("%A-W%Sz-%JSz"));
console.log("31 Déc 2007 = %A-W%Sz-%JSz = ISO2008-W01-1 => "+new acte.Jour("31 Déc 2007").gregorien("%A-W%Sz-%JSz"));
console.log(new acte.Jour("1/12/2016").gregorien("%JSl %Jp %Ml %A"));
console.log(new acte.Jour("2/12/2016").gregorien("%JSl %Jp %Ml %A"));
console.log(new acte.Jour("7/1/2016").gregorien("%SAef semaine"));
console.log(new acte.Jour("14/1/2016").gregorien("%SAe semaine"));
console.log(new acte.Jour("1/1/2016").gregorien("%JAe jour"));
console.log(new acte.Jour("3/1/2016").gregorien("%JAe jour"));
console.log("--------------------------------------------------");
console.log("%JAl, %JAle, %JAel, %JAlp, %JAlf, %JAe, %JAf, %JAp (jour de l'année) = "+birth.gregorien("%JAl, %JAle, %JAel, %JAlp, %JAlf, %JAe, %JAf, %JAp"));
console.log("%JAl, %JAle, %JAel, %JAlp, %JAlf, %JAe, %JAf, %JAp (jour de l'année) = "+new acte.Jour("1/1/2016").gregorien("%JAl, %JAle, %JAel, %JAlp, %JAlf, %JAe, %JAf, %JAp"));
console.log("--------------------------------------------------");
console.log("--------------------------------------------------");
console.log(new acte.Jour("3/1/2016").gregorien("%A"));
console.log(new acte.Jour("3/1/2016").gregorien("%Al"));
console.log(new acte.Jour("3/1/2016").gregorien("%Alv"));
console.log(new acte.Jour("3/1/2016").gregorien("%Av"));
console.log(new acte.Jour("3/1/2016").gregorien("%Avl"));
